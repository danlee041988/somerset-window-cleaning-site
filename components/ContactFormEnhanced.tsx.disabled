"use client"

import React from 'react'
import { useForm } from 'react-hook-form'
import { zodResolver } from '@hookform/resolvers/zod'
import emailjs from '@emailjs/browser'
import ReCaptcha from './ReCaptcha'
import SimpleAddressInput from './SimpleAddressInput'
import { FormField, FormInput, FormTextarea } from './form/FormField'
import { FormErrorSummary, SubmissionError } from './form/FormErrorSummary'
import { analytics } from '@/lib/analytics'
// Google Maps functionality temporarily removed for billing reasons
import { sendBookingConfirmation, validateWhatsAppNumber } from '@/lib/whatsapp-business'
import { 
  contactFormSchema, 
  type ContactFormData,
  validateFormSubmission,
  getFieldRequirementText,
  getSuccessMessage
} from '@/lib/validation'
import { scrollToFirstError, announceToScreenReader, formatPhoneNumber } from '@/lib/utils'

const PUBLIC_KEY = process.env.NEXT_PUBLIC_EMAILJS_PUBLIC_KEY || ''
const SERVICE_ID = process.env.NEXT_PUBLIC_EMAILJS_SERVICE_ID || ''
const TEMPLATE_ID = process.env.NEXT_PUBLIC_EMAILJS_TEMPLATE_ID || ''

const SERVICE_OPTIONS = [
  'Window Cleaning',
  'Gutter Clearing',
  'Conservatory Roof Cleaning',
  'Solar Panel Cleaning',
  'Fascias & Soffits Cleaning',
  'External Commercial Cleaning',
] as const

const BEDROOM_OPTIONS = [
  { label: '1-2 bedrooms', value: '1-2 bedrooms', basePrice: 18 },
  { label: '3 bedrooms', value: '3 bedrooms', basePrice: 25 },
  { label: '4 bedrooms', value: '4 bedrooms', basePrice: 30 },
  { label: '5 bedrooms', value: '5 bedrooms', basePrice: 35 },
  { label: '6+ bedrooms', value: '6+ bedrooms', basePrice: null },
  { label: 'Commercial', value: 'commercial', basePrice: null },
] as const

const PROPERTY_TYPE_OPTIONS = [
  'Detached house',
  'Terraced / Semi-detached house',
] as const

const COMMERCIAL_OPTION = 'Commercial property'

interface ContactFormProps {
  defaultPostcode?: string
  defaultService?: string
}

export default function ContactFormEnhanced({ defaultPostcode, defaultService }: ContactFormProps = {}) {
  const formRef = React.useRef<HTMLFormElement>(null)
  
  // Map service query parameter to actual service name
  const getServiceName = (serviceParam?: string) => {
    if (!serviceParam) return []
    
    const serviceMap: Record<string, string> = {
      'window-cleaning': 'Window Cleaning',
      'gutter-clearing': 'Gutter Clearing',
      'conservatory-cleaning': 'Conservatory Roof Cleaning',
      'solar-cleaning': 'Solar Panel Cleaning',
      'fascias-soffits': 'Fascias & Soffits Cleaning',
      'commercial-cleaning': 'External Commercial Cleaning',
    }
    
    const serviceName = serviceMap[serviceParam]
    return serviceName ? [serviceName] : []
  }
  
  const { 
    register, 
    handleSubmit, 
    watch, 
    reset, 
    setError, 
    clearErrors, 
    setValue,
    trigger,
    formState: { errors, isSubmitting, isValid } 
  } = useForm<ContactFormData>({
    resolver: zodResolver(contactFormSchema),
    mode: 'onBlur', // Validate on blur for better UX
    defaultValues: { 
      property_address: defaultPostcode || '',
      preferred_contact: 'Email', 
      services: getServiceName(defaultService),
      frequency: '8-weeks',
      has_extension: false,
      has_conservatory: false,
      customer_type: 'new'
    }
  })
  
  // Form state
  const [status, setStatus] = React.useState<'idle' | 'submitting' | 'success' | 'error'>('idle')
  const [submissionError, setSubmissionError] = React.useState<string | null>(null)
  const [recaptchaToken, setRecaptchaToken] = React.useState<string | null>(null)
  const [formStarted, setFormStarted] = React.useState<boolean>(false)
  // Address validation temporarily disabled due to Google Maps billing requirements
  const [whatsappOptIn, setWhatsappOptIn] = React.useState<boolean>(false)
  const [whatsappValidation, setWhatsappValidation] = React.useState<{ isValid: boolean; error?: string; formattedNumber?: string } | null>(null)
  const [uploadedPhotos, setUploadedPhotos] = React.useState<File[]>([])
  const [photoUploadError, setPhotoUploadError] = React.useState<string | null>(null)
  const [fieldValidationStates, setFieldValidationStates] = React.useState<Record<string, { success?: string; warning?: string }>>({})
  
  const start = React.useRef<number>(Date.now())

  // Watch form values
  const watchedServices = watch('services')
  const selectedServices = React.useMemo(() => watchedServices || [], [watchedServices])
  const customerType = watch('customer_type') || 'new'
  const hasWindowCleaning = selectedServices.includes('Window Cleaning')
  const mobileValue = watch('mobile')
  const emailValue = watch('email')
  const addressValue = watch('property_address')

  // Real-time field validation
  const validateFieldInRealTime = React.useCallback(async (fieldName: keyof ContactFormData, value: any) => {
    try {
      await trigger(fieldName)
      
      // Set success messages for valid fields
      const successMessage = getSuccessMessage(fieldName, value)
      if (successMessage && !errors[fieldName]) {
        setFieldValidationStates(prev => ({
          ...prev,
          [fieldName]: { success: successMessage }
        }))
      } else {
        setFieldValidationStates(prev => {
          const newState = { ...prev }
          delete newState[fieldName]
          return newState
        })
      }
    } catch (error) {
      // Clear success state on error
      setFieldValidationStates(prev => {
        const newState = { ...prev }
        delete newState[fieldName]
        return newState
      })
    }
  }, [trigger, errors])

  // Phone number formatting and WhatsApp validation
  React.useEffect(() => {
    if (mobileValue && mobileValue.length >= 10) {
      const validation = validateWhatsAppNumber(mobileValue)
      setWhatsappValidation(validation)
    } else {
      setWhatsappValidation(null)
    }
  }, [mobileValue])

  // Address change handler (simplified without Google Maps validation)
  const handleAddressChange = (address: string) => {
    setValue('property_address', address)
    validateFieldInRealTime('property_address', address)
  }

  // reCAPTCHA handlers
  const handleRecaptchaChange = (token: string | null) => {
    setRecaptchaToken(token)
    setValue('recaptcha', token || '')
    if (token) {
      clearErrors('recaptcha')
      analytics.recaptchaComplete()
    }
  }

  const handleRecaptchaExpired = () => {
    setRecaptchaToken(null)
    setValue('recaptcha', '')
    setError('recaptcha', { type: 'manual', message: 'reCAPTCHA expired, please try again' })
    analytics.recaptchaError('expired')
  }

  // Photo upload handlers
  const handlePhotoUpload = (e: React.ChangeEvent<HTMLInputElement>) => {
    const files = Array.from(e.target.files || [])
    setPhotoUploadError(null)
    
    // Validation
    const maxFiles = 5
    const maxSize = 10 * 1024 * 1024 // 10MB per file
    const allowedTypes = ['image/jpeg', 'image/jpg', 'image/png', 'image/webp', 'image/heic']
    
    if (uploadedPhotos.length + files.length > maxFiles) {
      setPhotoUploadError(`Maximum ${maxFiles} photos allowed`)
      return
    }
    
    for (const file of files) {
      if (file.size > maxSize) {
        setPhotoUploadError(`File "${file.name}" is too large. Maximum size is 10MB per photo.`)
        return
      }
      
      if (!allowedTypes.includes(file.type)) {
        setPhotoUploadError(`File "${file.name}" is not a supported image format. Please use JPG, PNG, WebP, or HEIC.`)
        return
      }
    }
    
    setUploadedPhotos(prev => [...prev, ...files])
    analytics.trackCustomEvent('photos_uploaded', 'Contact Form', 'Photo Upload', files.length)
  }
  
  const removePhoto = (index: number) => {
    setUploadedPhotos(prev => prev.filter((_, i) => i !== index))
    analytics.trackCustomEvent('photo_removed', 'Contact Form', 'Photo Removed', 1)
  }

  // Form tracking
  const trackFormStart = React.useCallback(() => {
    if (!formStarted) {
      setFormStarted(true)
      analytics.formStart(selectedServices[0])
    }
  }, [formStarted, selectedServices])

  // Set hidden timestamp fields
  React.useEffect(() => {
    const now = new Date()
    setValue('submission_date', now.toISOString().split('T')[0])
    setValue('submission_time', now.toTimeString().split(' ')[0])
  }, [setValue])

  // Form submission
  const onSubmit = async (values: ContactFormData) => {
    setStatus('submitting')
    setSubmissionError(null)
    
    // Additional security checks
    if (values.website) {
      setSubmissionError('Security check failed. Please refresh and try again.')
      setStatus('error')
      return
    }
    
    const elapsed = Date.now() - start.current
    if (elapsed < 2000) {
      setSubmissionError('Please wait a moment before submitting.')
      setStatus('error')
      return
    }

    // Final validation
    const validationResult = validateFormSubmission(values)
    if (!validationResult.success) {
      // Set field errors
      Object.entries(validationResult.fieldErrors).forEach(([field, message]) => {
        setError(field as keyof ContactFormData, { type: 'manual', message })
      })
      
      // Scroll to first error
      scrollToFirstError(validationResult.fieldErrors)
      
      // Announce errors to screen reader
      announceToScreenReader(`${validationResult.errorCount} validation errors found. Please check the form.`)
      
      setStatus('error')
      setSubmissionError('Please fix the validation errors below.')
      return
    }

    try {
      // Prepare data for EmailJS
      const form = formRef.current
      if (!form) throw new Error('Form reference not found')

      const fullName = `${values.first_name} ${values.last_name}`.trim()
      const now = new Date()

      // Upload photos to Notion first if any
      let uploadedFileIds: string[] = []
      if (uploadedPhotos.length > 0) {
        try {
          const photoUploadPromises = uploadedPhotos.map(async (photo) => {
            const formData = new FormData()
            formData.append('file', photo)
            formData.append('filename', photo.name)
            
            const response = await fetch('/api/upload-photo', {
              method: 'POST',
              body: formData
            })
            
            if (!response.ok) {
              throw new Error(`Failed to upload ${photo.name}`)
            }
            
            const result = await response.json()
            return result.fileUploadId
          })
          
          uploadedFileIds = await Promise.all(photoUploadPromises)
        } catch (photoError) {
          console.warn('⚠️ Photo upload failed:', photoError)
        }
      }
      
      // Ensure hidden fields for EmailJS compatibility
      const ensureHidden = (name: string, value: string) => {
        let input = form.querySelector<HTMLInputElement>(`input[name="${name}"]`)
        if (!input) {
          input = document.createElement('input')
          input.type = 'hidden'
          input.name = name
          form.appendChild(input)
        }
        input.value = value
      }

      // Map form data to EmailJS template fields
      ensureHidden('name', fullName)
      ensureHidden('phone', values.mobile)
      ensureHidden('property_address', values.property_address)
      ensureHidden('services_list', values.services.join(', '))
      ensureHidden('property_type_field', values.property_type || '')
      ensureHidden('property_bedrooms', values.bedrooms || '')
      ensureHidden('property_extension', values.has_extension ? 'Yes' : 'No')
      ensureHidden('property_conservatory', values.has_conservatory ? 'Yes' : 'No')
      ensureHidden('cleaning_frequency', values.frequency?.replace('-', ' ') || '')
      ensureHidden('customer_type_field', customerType === 'new' ? 'New Customer' : 'Existing Customer')
      ensureHidden('submitted_at', now.toLocaleString('en-GB'))
      ensureHidden('submitted_date', now.toLocaleDateString('en-GB'))
      ensureHidden('submitted_time', now.toLocaleTimeString('en-GB'))
      ensureHidden('recaptcha_token', recaptchaToken || '')

      // Send to both EmailJS and Notion in parallel
      const [emailResult, notionResult] = await Promise.allSettled([
        emailjs.sendForm(SERVICE_ID, TEMPLATE_ID, form, PUBLIC_KEY),
        
        fetch('/api/notion-direct', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            firstName: values.first_name,
            lastName: values.last_name,
            email: values.email,
            phone: values.mobile,
            postcode: values.property_address,
            propertyType: values.property_type,
            propertySize: values.bedrooms,
            services: values.services,
            frequency: values.frequency,
            customerType: customerType,
            message: values.message,
            preferredContact: values.preferred_contact,
            hasExtension: values.has_extension,
            hasConservatory: values.has_conservatory,
            propertyNotes: values.property_notes,
            whatsappOptIn: whatsappOptIn,
            customerPhotos: uploadedFileIds
          })
        }).then(res => res.json())
      ])

      // Check EmailJS result (critical)
      if (emailResult.status === 'rejected') {
        throw new Error(`Email delivery failed: ${emailResult.reason}`)
      }

      // Log Notion result (non-critical)
      if (notionResult.status === 'fulfilled') {
        const notionData = notionResult.value
        if (notionData.success) {
          console.log('✅ Customer created in Notion:', notionData.customerId)
        } else {
          console.warn('⚠️ Notion submission failed:', notionData.error)
        }
      }
      
      // Track successful form submission
      analytics.formSubmit({
        serviceType: values.services?.[0],
        propertySize: values.bedrooms,
        customerType: customerType,
        email: values.email
      })

      // Send WhatsApp confirmation if opted in
      if (whatsappOptIn && whatsappValidation?.isValid && whatsappValidation.formattedNumber) {
        try {
          const confirmationCode = `SWC-${Date.now().toString(36).toUpperCase()}`
          await sendBookingConfirmation({
            customerName: fullName,
            customerPhone: whatsappValidation.formattedNumber,
            serviceType: values.services?.[0] || 'Window Cleaning',
            appointmentDate: 'To be scheduled',
            appointmentTime: 'To be confirmed',
            propertyAddress: values.property_address,
            confirmationCode,
            estimatedDuration: 120,
          })
          analytics.trackCustomEvent('whatsapp_sent', 'Contact Form', 'Booking Confirmation', 1)
        } catch (error) {
          console.warn('WhatsApp confirmation failed:', error)
        }
      }
      
      setStatus('success')
      announceToScreenReader('Form submitted successfully! We will get back to you within one working day.')
      setRecaptchaToken(null)
      setUploadedPhotos([])
      reset()
    } catch (error) {
      console.error('Form submission error:', error)
      
      analytics.formError('submission_failed', error instanceof Error ? error.message : 'Unknown error')
      
      setStatus('error')
      setSubmissionError(
        error instanceof Error 
          ? `Submission failed: ${error.message}. Please try again or contact us directly.`
          : 'An unexpected error occurred. Please try again or contact us directly.'
      )
    }
  }

  const retrySubmission = () => {
    setStatus('idle')
    setSubmissionError(null)
  }

  // Calculate error summary
  const errorEntries = Object.entries(errors).map(([field, error]) => [field, error?.message || 'Invalid input'])
  const fieldErrors = Object.fromEntries(errorEntries.filter(([_, message]) => message))

  if (status === 'success') {
    return (
      <div className="relative overflow-hidden rounded-2xl border border-white/20 bg-gradient-to-br from-white/10 to-white/5 backdrop-blur-sm p-8 text-center">
        <div className="w-16 h-16 mx-auto mb-6 rounded-full bg-green-500/20 flex items-center justify-center">
          <svg className="w-8 h-8 text-green-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M5 13l4 4L19 7" />
          </svg>
        </div>
        <h3 className="text-2xl font-bold text-white mb-4">Message sent successfully!</h3>
        <p className="text-white/80 mb-6">
          Thank you for getting in touch. We&apos;ll review your requirements and get back to you within the first working day.
        </p>
        <div className="grid grid-cols-1 md:grid-cols-3 gap-4 text-sm">
          <div className="flex items-center gap-2 justify-center">
            <svg className="w-4 h-4 text-green-400" fill="currentColor" viewBox="0 0 20 20">
              <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clipRule="evenodd" />
            </svg>
            <span className="text-white/70">Response within 1 working day</span>
          </div>
          <div className="flex items-center gap-2 justify-center">
            <svg className="w-4 h-4 text-green-400" fill="currentColor" viewBox="0 0 20 20">
              <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clipRule="evenodd" />
            </svg>
            <span className="text-white/70">No hidden fees</span>
          </div>
          <div className="flex items-center gap-2 justify-center">
            <svg className="w-4 h-4 text-green-400" fill="currentColor" viewBox="0 0 20 20">
              <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clipRule="evenodd" />
            </svg>
            <span className="text-white/70">Professional service</span>
          </div>
        </div>
      </div>
    )
  }

  return (
    <div className="relative overflow-hidden rounded-2xl border border-white/20 bg-gradient-to-br from-white/10 to-white/5 backdrop-blur-sm">
      <div className="absolute top-0 left-0 right-0 h-1 bg-gradient-to-r from-brand-red via-brand-red to-transparent" />
      
      <div className="p-8">
        <div className="mb-8 text-center">
          <h2 className="text-2xl font-bold bg-gradient-to-r from-white to-white/90 bg-clip-text text-transparent mb-3">
            {customerType === 'new' ? 'Get Your Free Quote' : 'Update Your Details'}
          </h2>
          <p className="text-white/80">
            {customerType === 'new' 
              ? 'Tell us about your property and we&apos;ll provide a comprehensive quotation with transparent pricing.'
              : 'Update your contact details or add additional services to your existing plan.'
            }
          </p>
        </div>

        {/* Error Summary */}
        {Object.keys(fieldErrors).length > 0 && (
          <FormErrorSummary 
            errors={fieldErrors}
            generalErrors={submissionError ? [submissionError] : []}
            className="mb-6"
          />
        )}

        {/* Submission Error */}
        {status === 'error' && submissionError && (
          <SubmissionError 
            error={submissionError}
            retry={retrySubmission}
            className="mb-6"
          />
        )}

        <form ref={formRef} onSubmit={handleSubmit(onSubmit)} className="space-y-6" noValidate>
          {/* Customer Type Selection */}
          <div className="space-y-4">
            <h3 className="text-lg font-semibold text-white flex items-center gap-2">
              <svg className="w-5 h-5 text-brand-red" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M9 12l2 2 4-4M7.835 4.697a3.42 3.42 0 001.946-.806 3.42 3.42 0 014.438 0 3.42 3.42 0 001.946.806 3.42 3.42 0 013.138 3.138 3.42 3.42 0 00.806 1.946 3.42 3.42 0 010 4.438 3.42 3.42 0 00-.806 1.946 3.42 3.42 0 01-3.138 3.138 3.42 3.42 0 00-1.946.806 3.42 3.42 0 01-4.438 0 3.42 3.42 0 00-1.946-.806 3.42 3.42 0 01-3.138-3.138 3.42 3.42 0 00-.806-1.946 3.42 3.42 0 010-4.438 3.42 3.42 0 00.806-1.946 3.42 3.42 0 013.138-3.138z" />
              </svg>
              I am a...
            </h3>
            
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <label className="flex items-start gap-3 p-4 rounded-lg border border-white/20 bg-white/5 cursor-pointer hover:border-brand-red/50 transition-colors">
                <input 
                  type="radio" 
                  value="new" 
                  className="mt-1 accent-brand-red" 
                  {...register('customer_type')} 
                />
                <div>
                  <div className="font-medium text-white">New Customer</div>
                  <div className="text-sm text-white/70 mt-1">Ready to book our services? Get a comprehensive quotation for your property.</div>
                </div>
              </label>
              
              <label className="flex items-start gap-3 p-4 rounded-lg border border-white/20 bg-white/5 cursor-pointer hover:border-brand-red/50 transition-colors">
                <input 
                  type="radio" 
                  value="existing" 
                  className="mt-1 accent-brand-red" 
                  {...register('customer_type')} 
                />
                <div>
                  <div className="font-medium text-white">Existing Customer</div>
                  <div className="text-sm text-white/70 mt-1">Update your details, book additional services, or make changes to your schedule.</div>
                </div>
              </label>
            </div>
            {errors.customer_type && (
              <p className="text-red-400 text-xs mt-2" role="alert">{errors.customer_type.message}</p>
            )}
          </div>

          {/* Personal Information */}
          <div className="space-y-4">
            <h3 className="text-lg font-semibold text-white flex items-center gap-2">
              <svg className="w-5 h-5 text-brand-red" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
              </svg>
              Personal Information
            </h3>
            
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <FormField
                id="first_name"
                label="First Name"
                required
                requiredText={getFieldRequirementText('first_name')}
                error={errors.first_name?.message}
                success={fieldValidationStates.first_name?.success}
              >
                <FormInput
                  id="first_name"
                  type="text"
                  placeholder="Your first name"
                  error={!!errors.first_name}
                  success={!!fieldValidationStates.first_name?.success}
                  onFocus={trackFormStart}
                  onBlur={(e) => validateFieldInRealTime('first_name', e.target.value)}
                  {...register('first_name')}
                />
              </FormField>

              <FormField
                id="last_name"
                label="Last Name"
                required
                requiredText={getFieldRequirementText('last_name')}
                error={errors.last_name?.message}
                success={fieldValidationStates.last_name?.success}
              >
                <FormInput
                  id="last_name"
                  type="text"
                  placeholder="Your last name"
                  error={!!errors.last_name}
                  success={!!fieldValidationStates.last_name?.success}
                  onBlur={(e) => validateFieldInRealTime('last_name', e.target.value)}
                  {...register('last_name')}
                />
              </FormField>

              <FormField
                id="email"
                label="Email Address"
                required
                requiredText={getFieldRequirementText('email')}
                error={errors.email?.message}
                success={fieldValidationStates.email?.success}
              >
                <FormInput
                  id="email"
                  type="email"
                  placeholder="your.email@example.com"
                  error={!!errors.email}
                  success={!!fieldValidationStates.email?.success}
                  onBlur={(e) => validateFieldInRealTime('email', e.target.value)}
                  {...register('email')}
                />
              </FormField>

              <FormField
                id="mobile"
                label="Mobile Number"
                required
                requiredText={getFieldRequirementText('mobile')}
                error={errors.mobile?.message}
                success={fieldValidationStates.mobile?.success}
              >
                <FormInput
                  id="mobile"
                  type="tel"
                  placeholder="07123 456789"
                  error={!!errors.mobile}
                  success={!!fieldValidationStates.mobile?.success}
                  onBlur={(e) => validateFieldInRealTime('mobile', e.target.value)}
                  {...register('mobile')}
                />
                
                {/* WhatsApp validation feedback */}
                {whatsappValidation && (
                  <div className={`mt-2 p-2 rounded-lg text-xs ${
                    whatsappValidation.isValid 
                      ? 'bg-green-500/10 text-green-400 border border-green-500/30' 
                      : 'bg-orange-500/10 text-orange-400 border border-orange-500/30'
                  }`}>
                    <div className="flex items-center gap-2">
                      {whatsappValidation.isValid ? (
                        <>
                          <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M5 13l4 4L19 7" />
                          </svg>
                          <span>✅ WhatsApp compatible number</span>
                        </>
                      ) : (
                        <>
                          <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M12 9v2m0 4h.01" />
                          </svg>
                          <span>{whatsappValidation.error}</span>
                        </>
                      )}
                    </div>
                  </div>
                )}
              </FormField>
            </div>
          </div>

          {/* Continue with rest of form... */}
          
          {/* Submit Button */}
          <div className="pt-4">
            <button
              type="submit"
              disabled={isSubmitting || !recaptchaToken}
              className={`w-full px-8 py-4 font-semibold rounded-xl shadow-lg transition-all duration-300 ${
                isSubmitting || !recaptchaToken
                  ? 'bg-gray-600 text-gray-300 cursor-not-allowed opacity-60'
                  : 'bg-gradient-to-r from-brand-red to-brand-red/90 text-white hover:shadow-xl hover:shadow-brand-red/25 hover:scale-105 active:scale-95'
              }`}
            >
              {isSubmitting ? (
                <span className="flex items-center justify-center gap-2">
                  <svg className="w-5 h-5 animate-spin" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
                  </svg>
                  Sending your message...
                </span>
              ) : (
                <span className="flex items-center justify-center gap-2">
                  <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M12 19l9 2-9-18-9 18 9-2zm0 0v-8" />
                  </svg>
                  {!recaptchaToken ? '🔒 Complete reCAPTCHA to Send' : '✅ Send My Message'}
                </span>
              )}
            </button>
            
            {!recaptchaToken && (
              <p className="mt-2 text-sm text-yellow-400 text-center flex items-center justify-center gap-1">
                <svg className="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
                  <path fillRule="evenodd" d="M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z" clipRule="evenodd" />
                </svg>
                Please complete the reCAPTCHA verification above to send your message
              </p>
            )}
          </div>

          {/* Hidden fields */}
          <input type="hidden" {...register('submission_date')} />
          <input type="hidden" {...register('submission_time')} />
          <input type="hidden" {...register('website')} />
          <input type="hidden" {...register('recaptcha')} />
          
          {/* reCAPTCHA */}
          <div className="space-y-2">
            <ReCaptcha
              onChange={handleRecaptchaChange}
              onExpired={handleRecaptchaExpired}
              className="pt-4"
            />
            {errors.recaptcha && <p className="text-xs text-red-400 text-center">{errors.recaptcha.message}</p>}
          </div>
        </form>
      </div>
    </div>
  )
}